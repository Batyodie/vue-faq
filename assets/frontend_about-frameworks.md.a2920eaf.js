import{_ as a,o as t,c as e,S as s}from"./chunks/framework.216f95b1.js";const f=JSON.parse('{"title":"О фронтенд фреймворках","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/about-frameworks.md","filePath":"frontend/about-frameworks.md"}'),o={name:"frontend/about-frameworks.md"},r=s('<h1 id="о-фронтенд-фреимворках" tabindex="-1">О фронтенд фреймворках <a class="header-anchor" href="#о-фронтенд-фреимворках" aria-label="Permalink to &quot;О фронтенд фреймворках&quot;">​</a></h1><details class="details custom-block"><summary>Какие реактивные фронтенд фреймворки существуют</summary><p>React, Vue, Angular - самые распространенные. Есть множество других, не взлетевших.</p><p>Angular используется обычно для больших проектов (больших команд разного уровня разработчиков)</p><p>React и Vue схожи, но есть существенные отличия.</p><p>Vue быстрей, меньше, эффективней, не смешивает HTML и JS, меньший порог входа</p><p>За React-ом Цукерберг и бОльшая распространенность</p></details><details class="details custom-block"><summary>Что такое &quot;реактивность&quot;</summary><p>Наверное, самое фундаментальное отличие программы для фронта от программы для бэка, микросервиса и даже отдельного приложения с GUI, это понятие &quot;реактивности&quot;.</p><p>При работе на бэке программист имеет хорошие возможности управлять потоком данных. Он контролирует откуда их брать, куда передавать, кто их может изменить, всё это хоть в одном потоке, хоть в многопоточной системе.</p><p>На фронте большую роль играет фактор интерактивности UI - данные надо динамично показывать пользователю, пользователь может изменять данные, данные могут изменяться различными контрагентами (пользователь, бэкенд, внутренние вычисления). В принципе, возможно использовать обычные программистские подходы как и на бэке, - то есть, самому следить за изменениями данных в каждом месте, и проводить обновление все зависимостей. Это даст очень много бойлерплейта - рутинного повторяющегося кода. Реактивные фреймворки сильно облегчили жизнь программистам, взяв на себя заботу об этом обновлении зависимостей переменной при её изменении.</p><p>В реактивном фреймворке достаточно задать реактивную переменную и указать, что она является, например, значением input поля. При вводе пользователем в это поле значения переменная автоматически обновится, и все другие переменные, зависящие от нее, тоже. Кода писать для этого не надо.</p><p>Упрощенно, под капотом реактивная переменная это прокси-обертка над обычной, которая следит за её изменениями и регистрирует всех слушателей, которых надо оповестить об изменении переменной, чтобы они себя пересчитали.</p></details><details class="details custom-block"><summary>ООП на фронте</summary><p>Многие приходя</p></details>',4),p=[r];function c(l,n,u,m,d,i){return t(),e("div",null,p)}const h=a(o,[["render",c]]);export{f as __pageData,h as default};

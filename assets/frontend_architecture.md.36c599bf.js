import{_ as e,o,c as t,X as c}from"./chunks/framework.049a4bb5.js";const h=JSON.parse('{"title":"Архитектура фронтэнд приложений","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/architecture.md","filePath":"frontend/architecture.md"}'),a={name:"frontend/architecture.md"},s=c('<h1 id="архитектура-фронтэнд-приложении" tabindex="-1">Архитектура фронтэнд приложений <a class="header-anchor" href="#архитектура-фронтэнд-приложении" aria-label="Permalink to &quot;Архитектура фронтэнд приложений&quot;">​</a></h1><details class="details custom-block"><summary>Что такое хорошая архитектура веб-приложения</summary><p>Есть разные теоретические определения и обоснования данного понятия, но грубо говоря это следующее.</p><p>Допустим ты разрабатываешь проект, уже на финальном этапе. К тебе подходит заказчик и говорит что-то типа: я хочу добавить тень ко всем кнопкам, я хочу изменить UI библиотеку, мы решили поддерживать несколько языков, мы решили заменить вот этот модуль на другой, нужно сдделать более детальную адаптивность для разных разрешений, мы решили добавить темы, мы меняем провайдера услуг по обработке платежей, у нас повышается число пользователей / сайт тормозит / надо его ускорить, надо повысить уровень безопасности сайта, мы взяли мидл программиста, введи его в курс дела быстро, и пусть он добавляет функционал или фиксит баги и т.п.</p><p>Хорошая архитектура фронтенд приложения позволяет выполнить всё это наиболее эффективно с наименьшими затратами.</p></details><details class="details custom-block"><summary>ООП на фронтенде</summary><p>Многие приходя из разработки на объектно-ориентированных языках пытаются использовать концепции ООП и на фронте и программировать с классами, наследованием, полиморфизмом и прочим.</p><p>Это ошибка. Основные вычисления на фронте связаны с UI - показ данных, обработка взаимодействия с пользователем. Системы классов и микросервисов на них просто не нужны. Конечно, можно создать базовую кнопку, обернуть ее в два кастомных компонента и считать это наследованием, но в коде этого не получается. Поэтому надо учиться мыслить другими категориями - компоненты, композаблы, js модули. И использовать свою мощь JavaScript-a, а не пытаться натянуть его на ООП.</p><p>В то же время неплохой аналогией объекта с глобальным (&quot;статичным&quot;) и локальным (&quot;объектным&quot;) состоянием является композабл функция. Это можно использовать в определённых ситуациях.</p></details><details class="details custom-block"><summary>Подходящая архитектура для Vue 3 веб-приложения</summary><p>Самая удобная архитектура для Vue 3 приложения - модульная.</p><p>Изначально, приложение разбивается на логические модули, слабо связанные друг с другом. Например, для онлайн магазина это могут быть модуль каталога товаров, модуль отдельного товара, модуль личного кабинета / аккаунта пользователя.</p><p>Кроме того, есть модуль оболочки - то, что иногда называет <code>app shell</code>. Шаблон с хедером, футером, боковым меню и главным окном. В этот модуль целесообразно поместить утилиты и ресурсы, используемые по всему приложению - например, <code>api</code>, <code>useI18n</code>, <code>BaseButton</code> и <code>stringHelpers</code>.</p><p>В каждом модуле свои <code>components</code>, <code>composables</code>, <code>assets</code>, <code>utils</code>; возможно, <code>api</code>, <code>routes</code>, <code>views</code>, <code>layouts</code>.</p><p>Слабая связанность позволяет разрабатывать каждый модуль независимо, что значительно повышает вероятность успешности проекта.</p></details>',4),d=[s];function r(p,i,l,n,u,m){return o(),t("div",null,d)}const f=e(a,[["render",r]]);export{h as __pageData,f as default};

import{_ as s,o as e,c as a,X as t}from"./chunks/framework.049a4bb5.js";const r="/assets/spa-vs-mpa.d701fdfd.png",P=JSON.parse('{"title":"SPA, PWA, SSG и SSR","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/spa-pwa-ssr-ssg.md","filePath":"frontend/spa-pwa-ssr-ssg.md"}'),o={name:"frontend/spa-pwa-ssr-ssg.md"},p=t('<h1 id="spa-pwa-ssg-и-ssr" tabindex="-1">SPA, PWA, SSG и SSR <a class="header-anchor" href="#spa-pwa-ssg-и-ssr" aria-label="Permalink to &quot;SPA, PWA, SSG и SSR&quot;">​</a></h1><details class="details custom-block"><summary>Бытие</summary><p>Сперва был статичный HTML и браузеры показывали его. Чуть позже придумали немножко JavaScript-а, чтобы обрабатывать формочки и делать небольшую анимацию. Потом появился CSS, и все увидели, что это красиво. После кто-то предложил идею JSON для формата данных, а затем Микрософт подарила миру XMLHttpRequest, и JavaScript-у разрешили отправлять и получать данные с сервера.</p><p>Так родился SPA.</p></details><details class="details custom-block"><summary>SPA</summary><p>SPA (Single Page Application) работает примерно как обычное десктоп/мобильное приложение - при первом обращении на сервер получает програмную оболочку, необходимую для отображения сайта, а затем уже пересылает на/с сервера данные, обычно в JSON формате. Так получается намного эффективней способа, когда с каждым запросом с сервера приходила новая HTML страница с всеми ресурсами.</p><p>Для пользователя UX повышается значительно.</p><p><img src="'+r+'" alt="spa-vs-mpa"></p></details><details class="details custom-block"><summary>PWA</summary><p>PWA (Progressive Web Application) - еще один шаг, чтобы улучшить пользовательский опыт и максимально приблизить веб приложения по ощущениям пользователя к нативным.</p><p>При PWA к SPA добавляются два элемента.</p><ol><li><p><code>Манифест</code>. Текстовый файл со свойствами приложения. Благодаря ему иконка веб-приложения может быть установлена также как и у нативных приложений на домашний экран смартфона. Кроме того, при запуске PWA может не показывать элементы браузера и казаться обычным приложением.</p></li><li><p><code>Service worker</code>. Это прослойка в браузере между сервером и самим браузером, которая позволяет сделать управляемое кэширование. Другими словами, сохранить приложение со всеми ресурсами на смартфоне/компьютере, чтобы при запуске оно сразу запускалось. Если не нужны данные с сервера, то приложение может работать оффлайн (например, Заметки).</p></li></ol><p>Больше о PWA можно прочесть на сайте, созданном командой Chrome - <a href="https://web.dev/progressive-web-apps/" target="_blank" rel="noreferrer">https://web.dev/</a></p></details><details class="details custom-block"><summary>Workbox и vite-plugin-pwa</summary><p><code>Манифест</code> и <code>Service worker</code> настолько просты, что создание обертки над SW - <code>Workbox</code>, и плагина для Vite <code>vite-plugin-pwa</code> логическому объяснению не поддается. Кода получается в несколько раз больше, нужно грузить дополнительные зависимости и разбираться в конфигурациях оберток. Простое сделали сложным.</p><p>Лучше <code>Манифест</code> и <code>Service worker</code> как они созданы изначально, и написать два этих простых файла по шаблонам из спецификаций.</p></details><details class="details custom-block"><summary>SSG</summary><p>SSG (Static Site Generation) — подход, когда содержимое сайта предварительно генерируется в html-файлы, которые потом раздаются с сервера.</p><p>Пример такого - VitePress и данный сайт.</p><p>Сразу подходит для индексации поисковиками.</p></details><details class="details custom-block"><summary>SSR</summary><p>SSR (Server Side Rendering), способ генерации html на стороне сервера, когда генерация происходит в момент обращения. После запроса клиентом странички, сервер на своей стороне выполняет API-запросы, а затем формирует html-страницу. Соответственно, на сервере нужен Node.js сервер, который довольно сильно нагружает железо.</p></details>',7),c=[p];function i(d,l,S,m,n,_){return e(),a("div",null,c)}const A=s(o,[["render",i]]);export{P as __pageData,A as default};
